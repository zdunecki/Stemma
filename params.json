{
  "name": "Stemma",
  "tagline": "checkbox tree",
  "body": "# Stemma\r\n## The dynamic checkbox tree\r\n_build on object data_\r\n```\r\n\tvar data = [\r\n\t    {child:'o1',text:'Option 1'},\r\n\t    {mineparent:'o1',child:'o1-o1',text:'Option 1.1'},\r\n\t    {mineparent:'o1',child:'o1-o2',text:'Option 1.2'},\r\n\t    {mineparent:'o1-o2',child:'o1-o2-o1',text:'Option 1.2.1'},\r\n\t    {mineparent:'o1-o2',child:'o1-o2-o2',text:'Option 1.2.2'},\r\n\t    {child:'o2',text:'Option 2'},\r\n\t    {mineparent:'o2',child:'o2-o1',text:'Option 2.1'},\r\n\t    {mineparent:'o2',child:'o2-o2',text:'Option 2.2'},\r\n\t    {mineparent:'o2-o2',child:'o2-o2-o1',text:'Option 2.2.1'},\r\n\t    {mineparent:'o2-o2',child:'o2-o2-o2',text:'Option 2.2.2'}\r\n\t  ];\r\n```\r\n\r\n_build on DOM_\r\n```\r\n<div id=\"mount\">\r\n\t<ul>\r\n\t\t<li><input type=\"checkbox\" data-child=\"o1\" id=\"mount-o1\"><label for=\"mount-o1\">Option 1</label></li>\r\n\t   \t\t<ul>\r\n\t   \t\t\t<li><input type=\"checkbox\" data-mine-parent=\"o1\" data-child=\"o1-o1\" id=\"mount-o1-o1\"><label for=\"mount-o1-o1\">Option 1.1</label></li>\r\n\t   \t\t\t<li><input type=\"checkbox\" data-mine-parent=\"o1\" data-child=\"o1-o2\" id=\"mount-o1-o2\"><label for=\"mount-o1-o2\">Option 1.2</label></li>\r\n\t   \t\t\t<ul>\r\n\t   \t\t\t\t<li><input type=\"checkbox\" data-mine-parent=\"o1-o2\" data-child=\"o1-o2-o1\" id=\"mount-o1-o2-o1\"><label for=\"mount-o1-o2-o1\">Option 1.2.1</label></li>\r\n\t   \t\t\t\t<li><input type=\"checkbox\" data-mine-parent=\"o1-o2\" data-child=\"o1-o2-o2\" id=\"mount-o1-o2-o2\"><label for=\"mount-o1-o2-o2\">Option 1.2.2</label></li>\r\n\t   \t\t\t</ul>\r\n\t   \t\t</ul>\r\n   \t \t<li><input type=\"checkbox\" data-child=\"o2\" id=\"mount-o2\"\"><label for=\"mount-o2\">Option2</label></li>\r\n\t   \t \t<ul>\r\n\t   \t \t\t<li><input type=\"checkbox\" data-mine-parent=\"o2\" data-child=\"o2-o1\" id=\"mount-o2-o1\"><label for=\"mount-o2-o1\">Option 2.1</label></li>\r\n\t   \t \t\t<li><input type=\"checkbox\" data-mine-parent=\"o2\" data-child=\"o2-o2\" id=\"mount-o2-o2\"><label for=\"mount-o2-o2\">Option 2.2</label></li>\r\n\t   \t \t\t<ul>\r\n\t   \t \t\t\t<li><input type=\"checkbox\" data-mine-parent=\"o2-o2\" data-child=\"o2-o2-o1\" id=\"mount-o2-o2-o1\"><label for=\"mount-o2-o2-o1\">Option 2.2.1</label></li>\r\n\t   \t \t\t\t<li><input type=\"checkbox\" data-mine-parent=\"o2-o2\" data-child=\"o2-o2-o2\" id=\"mount-o2-o2-o2\"><label for=\"mount-o2-o2-o2\">Option 2.2.2</label></li>\r\n\t   \t \t\t</ul>\r\n\t   \t \t</ul>\t \t\t\r\n   \t </ul>\r\n</div>\r\n```\r\n### Example\r\n![Semma list](http://s32.postimg.org/ca1wb6iol/semma_list.png)\r\n\r\n\r\n***\r\n# Generation\r\n### New generation syntax\r\nTo build new generation we need dash syntax. The dash build new generation beetwen mineparent and child property or data-child and data-mine-parent attributes if we build DOM manually, \r\n### First generation\r\nFirst generation start with child property and dont need mineparent becouse \r\nit is independent of all posterity.\r\n### Build new generation\r\nUse new generation syntax to build tree relationship. Example:\r\n\r\n`\r\n{child:father,text:'I am father'},\r\n{mineparent:'father',child:'father-children1',text:'I am children'},\r\n{mineparent:'father-children1',child:'father-children1-children1',text:'I am children of father children'},\r\n{mineparent:'father',child:'father-children2',text:'I am children 2'},\r\n`\r\n\r\nFather contains all objects becouse each mineparent of objects have father generation, but first father's children contain only one object becouse only one object have father-children1 generation.\r\n\r\n\r\n# Usage\r\n\r\n```\r\nvar Options = new Stemma(mountElement,{options});\r\n```\r\n### Parameters\r\n* mountElement(DOM element) - **required parameter** - to bind/find checkboxes\r\n* options(Object) - optional parameter\r\n  *  data - bind object data to mountElement and convert as DOM elements. Data properties:\r\n    * child - It has a unique name for each object. If child is a new generation then child name is father child property and any name maintaining new generation syntax.\r\n    * mineparent - look for each child property to indentify relation child-parent. If mineparent equal any child property of object means that mineparent checkbox is a children of this child checkbox. ***Remember*** to use new generation syntax to create tree relationship.\r\n    * text - text for label element",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}